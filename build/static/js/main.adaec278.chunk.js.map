{"version":3,"sources":["utils.ts","components/ForecastCardItem/ForecastCardItem.tsx","context/weatherForecast/weatherForecastContext.tsx","components/ForecastCardList/ForecastCardList.tsx","components/SelectCity/SelectCity.tsx","components/SelectCity/SelectCityContainer.tsx","components/ForecastSevenDays/ForecastSevenDays.tsx","components/ForecastCardItem/ForecastCardItemOne.tsx","components/SelectDate/SelectDate.tsx","components/SelectCity/SelectCityOneContainer.tsx","components/ForecastOneDay/ForecastOneDay.tsx","context/type.tsx","context/weatherForecast/weatherForecastReducer.tsx","api/consts.ts","api/requests.ts","context/weatherForecast/WeatherForecastState.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["convertKelvinToCelsius","temp","Math","round","formatDate","date","Date","toISOString","substr","getCityByIndex","index","cities","ForecastCardItem","cardInfo","dt","icon","weather","day","className","src","icons","url","alt","WeatherForecastContext","createContext","ForecastCardList","useContext","loading","weathers","selectedCityIndex","getSevenDaysForecast","useState","count","setCount","weathersThree","slice","useEffect","selectedCity","coordinates","onClick","map","card","SelectCity","value","onChange","e","target","selected","disabled","hidden","city","id","name","SelectCityContainer","selectCityIndex","ForecastSevenDays","action","ForecastCardItemOne","SelectDate","selectedDate","selectDate","currentDate","now","type","placeholder","min","max","SelectCityOneContainer","selectCityOneIndex","selectedCityOneIndex","console","log","ForecastOneDay","getOneDayForecast","formattedDate","getTime","toString","SELECT_DATE","GET_WEATHERS","GET_WEATHER","SET_LOADING","SET_STOP_LOADING","SELECT_CITY_INDEX","SELECT_CITY_ONE_INDEX","handlers","state","payload","weatherForecastReducer","DEFAULT","API_KEY","API_URL","API_SEVEN_DAYS_URL","API_ONE_DAY_URL","fetchSevenDaysForecast","a","lat","lon","fetch","result","json","forecast","daily","length","Error","message","fetchOneDayForecast","current","WeatherForecastState","children","initialState","undefined","useReducer","dispatch","setLoading","sevenDaysForecast","setStopLoading","oneDayForecast","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ohEAGaA,EAAyB,SAACC,GAAD,OAAkBC,KAAKC,MAAMF,EAAO,MAE7DG,EAAa,SAACC,GAEvB,OADqB,IAAIC,KAAY,IAAPD,GACVE,cAAcC,OAAO,EAAE,KAGlCC,EAAiB,SAACC,GAAD,OAA6BC,IAAOD,I,OCHrDE,EAAwB,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,SAG7BR,EAAOD,EAAWS,EAASC,IAC3BC,EAAOF,EAASG,QAAQ,GAAGD,KAC3Bd,EAAOD,EAAuBa,EAASZ,KAAKgB,KAElD,OACI,sBAAKC,UAAU,oBAAf,UACI,sBAAMA,UAAU,OAAhB,SAAwBb,IAExB,qBAAKa,UAAU,eAAeC,IAAKC,IAAML,GAAMM,IAAKC,IAAKF,IAAML,GAAMO,MACrE,oBAAGJ,UAAU,cAAb,oBAA+BjB,GAA/B,cCfCsB,G,MAA8BC,wBAAqB,OCEnDC,EAA4C,WAAO,IAAD,EACUC,qBAAWH,GAAzEI,EADoD,EACpDA,QAASC,EAD2C,EAC3CA,SAAUC,EADiC,EACjCA,kBAAmBC,EADc,EACdA,qBADc,EAEjCC,mBAAS,GAFwB,mBAEpDC,EAFoD,KAE7CC,EAF6C,KAGrDC,EAAgBN,GAAYA,EAASO,MAAMH,EAAOA,EAAQ,GAShE,OAPAI,qBAAU,WACN,GAAIP,GAAqB,EAAG,CACxB,IAAMQ,EAAe5B,EAAeoB,GACpCC,EAAqBO,EAAaC,gBAEvC,CAACT,IAGA,mCACMA,GAAqB,EACjB,qBAAKX,UAAU,oBAAf,SACGS,EACK,mBAAGT,UAAU,UAAb,iEACA,qCACc,IAAVc,EACI,KACA,wBAAQd,UAAU,gCACVqB,QAAS,kBAAMN,EAASD,EAAQ,MAG7CE,EAAcM,KAAI,SAACC,GAAD,OAAgB,cAAC,EAAD,CAAkB5B,SAAU4B,GAAWA,EAAK3B,OAC7EkB,EAAQ,EACJ,KACA,wBAAQd,UAAU,iCACVqB,QAAS,kBAAMN,EAASD,EAAQ,WAKxD,qBAAKd,UAAU,qBAAf,SACE,mBAAGA,UAAU,wBAAb,2EChCPwB,G,YAAiD,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,MAAOhC,EAAsB,EAAtBA,OAAQiC,EAAc,EAAdA,SAM3E,OACI,yBAAQ1B,UAAU,SAAS0B,SALN,SAACC,GACtBD,GAAUC,EAAEC,OAAOH,QAIoCA,MAAOA,EAA9D,UACI,wBAAQI,UAAQ,EAACC,UAAQ,EAACC,QAAM,EAACN,MAAM,GAAvC,yBAEIhC,GAAUA,EAAO6B,KAAI,SAACU,EAAMxC,GAAW,IAC5ByC,EAAYD,EAAZC,GAAIC,EAAQF,EAARE,KACX,OAAQ,wBAAiBT,MAAOjC,EAAxB,SAAgC0C,GAAnBD,WChB5BE,EAAyC,WAAO,IAAD,EACX3B,qBAAWH,GAAjD+B,EADiD,EACjDA,gBAAiBzB,EADgC,EAChCA,kBAMxB,OAAO,cAAC,EAAD,CAAYc,MAAOd,EAAmBlB,OAAQA,IAAQiC,SAJpC,SAACD,GACtBW,EAAgBX,OCJXY,EAA6C,WAEtD,OACI,sBAAKrC,UAAU,qBAAf,UACI,oBAAIA,UAAU,yBAAd,6BACA,sBAAMsC,OAAO,IAAItC,UAAU,WAA3B,SACI,cAAC,EAAD,MAEJ,cAAC,EAAD,QCNCuC,EAA2B,SAAC,GAAqB,IAAD,IAAnB5C,EAAmB,EAAnBA,SAEhCR,EAAOD,EAAWS,EAASC,IAC3BC,EAAOF,EAASG,QAAQ,GAAGD,KAC3Bd,EAAOD,EAAuBa,EAASZ,MAE7C,OACI,sBAAKiB,UAAU,oBAAf,UACI,sBAAMA,UAAU,OAAhB,SAAwBb,IAExB,qBAAKa,UAAU,eAAeC,IAAG,UAAEC,IAAML,UAAR,aAAE,EAAaM,IAAKC,KAAK,UAAAF,IAAML,UAAN,eAAaO,MAAO,iBAC9E,oBAAGJ,UAAU,cAAb,oBAA+BjB,GAA/B,cCdCyD,G,MAAsC,WAAO,IAAD,EAClBhC,qBAAWH,GAAvCoC,EAD8C,EAC9CA,aAAcC,EADgC,EAChCA,WACfC,EAAcvD,KAAKwD,MAMzB,OACI,uBACIC,KAAK,OACL7C,UAAU,SACVkC,KAAK,OACLY,YAAY,OACZC,IAAI,aACJC,IAAKL,EACLlB,MAAOgB,EACPf,SAbc,SAACC,GACnBe,EAAWf,EAAEC,OAAOH,YCJfwB,G,MAA4C,WAAO,IAAD,EACRzC,qBAAWH,GAAvD6C,EADoD,EACpDA,mBAAoBC,EADgC,EAChCA,qBAO3B,OAAO,cAAC,EAAD,CAAY1B,MAAO0B,EAAsB1D,OAAQA,IAAQiC,SALvC,SAACD,GACtByB,EAAmBzB,GACnB2B,QAAQC,IAAI5B,QCFP6B,EAA0C,WAAO,IAAD,EAEyB9C,qBAAWH,GAA7EP,GAFyC,EAElDW,QAFkD,EAEzCX,SAASqD,EAFgC,EAEhCA,qBAAsBV,EAFU,EAEVA,aAAcc,EAFJ,EAEIA,kBAU7D,OARArC,qBAAU,WACN,GAAKiC,GAAwB,GAAMV,EAAc,CAC7C,IAAMtB,EAAe5B,EAAe4D,GAC9BK,GVFK,IAAIpE,KUEwBqD,GVD5BgB,UAAY,KAAMC,WUE7BH,EAAkBpC,EAAaC,YAAaoC,MAElD,CAACL,EAAsBV,IAGrB,sBAAKzC,UAAU,qBAAf,UACI,oBAAIA,UAAU,yBAAd,6CACA,uBAAMsC,OAAO,IAAItC,UAAU,WAA3B,UACI,cAAC,EAAD,IACA,cAAC,EAAD,OAGHF,EACK,cAAC,EAAD,CAAqBH,SAAUG,IAC/B,qBAAKE,UAAU,qBAAf,SACE,mBAAGA,UAAU,wBAAb,4E,qCC/BP2D,EAAc,cACdC,EAAe,eACfC,EAAc,cACdC,EAAc,cACdC,EAAmB,mBACnBC,EAAoB,oBACpBC,EAAwB,wBCH/BC,GAAQ,mBAETF,GAAoB,SAACG,EAAD,OAASC,EAAT,EAASA,QAAT,mBAAC,eAA0BD,GAA3B,IAAkCxD,kBAAmByD,OAFhE,cAITH,GAAwB,SAACE,EAAD,OAASC,EAAT,EAASA,QAAT,mBAAC,eAA0BD,GAA3B,IAAkChB,qBAAsBiB,OAJvE,cAMTR,GAAe,SAACO,EAAD,OAASC,EAAT,EAASA,QAAT,mBAAC,eAA0BD,GAA3B,IAAkCzD,SAAU0D,OANlD,cAQTP,GAAc,SAACM,EAAD,OAASC,EAAT,EAASA,QAAT,mBAAC,eAA0BD,GAA3B,IAAkCrE,QAASsE,OARhD,cAWTN,GAAc,SAAAK,GAAK,kCAASA,GAAT,IAAgB1D,SAAS,OAXnC,cAaTsD,GAAmB,SAAAI,GAAK,kCAASA,GAAT,IAAgB1D,SAAS,OAbxC,cAeTkD,GAAc,SAACQ,EAAD,OAASC,EAAT,EAASA,QAAT,mBAAC,eAA0BD,GAA3B,IAAkC1B,aAAc2B,OAfrD,yBAiBD,SAAAD,GAAK,OAAIA,KAjBR,GAoBDE,EAAkD,SAACF,EAAO7B,GAGnE,OADgB4B,EAAS5B,EAAOO,OAASqB,EAASI,SACnCH,EAAO7B,IC1BbiC,EAAU,mCACVC,EAAU,0CACVC,EAAkB,UAAMD,EAAN,YAClBE,EAAe,UAAMF,EAAN,wBCAfG,EAAsB,uCAAG,WAAOvD,GAAP,uBAAAwD,EAAA,sEAEvBC,EAAYzD,EAAZyD,IAAKC,EAAO1D,EAAP0D,IACN3E,EAHwB,UAGfsE,EAHe,gBAGWI,EAHX,gBAGsBC,EAHtB,kBAGmCP,GAHnC,SAITQ,MAAM5E,GAJG,cAIxB6E,EAJwB,gBAKPA,EAAOC,OALA,cAKxBC,EALwB,QAMrBC,MAAMC,OAAS,EANM,kBAOvBF,EAASC,OAPc,wCASxB,IAAIE,MAAM,KAAEC,SATY,0DAAH,sDAatBC,EAAmB,uCAAG,WAAOnE,EAA0BjC,GAAjC,mBAAAyF,EAAA,sEAErBzE,EAFqB,UAEZuE,EAFY,gBAEWtD,EAAYyD,IAFvB,gBAEkCzD,EAAY0D,IAF9C,eAEwD3F,EAFxD,kBAEsEoF,GAFtE,SAGNQ,MAAM5E,GAHA,cAGrB6E,EAHqB,gBAIJA,EAAOC,OAJH,cAIrBC,EAJqB,yBAKpBA,EAASM,SALW,wCAOrB,IAAIH,MAAM,KAAEC,SAPS,0DAAH,wDCAnBG,EAAgD,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAErDC,EAAqC,CACvChF,uBAAmBiF,EACnBzC,0BAAsByC,EACtBnD,aAAc,IAAIrD,KAAK,GACvBqB,SAAS,EACTC,SAAU,GACVZ,QAAS,MAR4D,EAW/C+F,qBAAWxB,EAAwBsB,GAXY,mBAWlExB,EAXkE,KAW3D2B,EAX2D,KA6BnElF,EAAoB,uCAAG,WAAOQ,GAAP,eAAAwD,EAAA,sEAErBmB,IAFqB,SAGWpB,EAAuBvD,GAHlC,OAGf4E,EAHe,OAKrBF,EAAS,CACLjD,KAAMe,EACNQ,QAAS4B,IAEbC,IATqB,sDAWrBA,IACM,IAAIZ,MAAM,KAAEC,SAZG,yDAAH,sDAgBpB/B,EAAiB,uCAAG,WAAOnC,EAA0BjC,GAAjC,eAAAyF,EAAA,sEAElBmB,IAFkB,SAGWR,EAAoBnE,EAAajC,GAH5C,OAGZ+G,EAHY,OAKlBJ,EAAS,CACLjD,KAAMgB,EACNO,QAAS8B,IAEbD,IATkB,sDAWlBA,IACM,IAAIZ,MAAM,KAAEC,SAZA,yDAAH,wDAoBjBS,EAAa,kBAAMD,EAAS,CAACjD,KAAMiB,KAGnCmC,EAAiB,kBAAMH,EAAS,CAACjD,KAAMkB,KAEtCpD,EAAqFwD,EAArFxD,kBAAmBwC,EAAkEgB,EAAlEhB,qBAAsBV,EAA4C0B,EAA5C1B,aAAchC,EAA8B0D,EAA9B1D,QAASC,EAAqByD,EAArBzD,SAAUZ,EAAWqE,EAAXrE,QAEjF,OACI,cAACO,EAAuB8F,SAAxB,CACI1E,MAAO,CACHb,uBAAsB2C,oBAAmBnB,gBA9D7B,SAAC5C,GAErBsG,EAAS,CACLjD,KAAMmB,EACNI,QAAS5E,KA0DqD0D,mBAtD3C,SAAC1D,GAExBsG,EAAS,CACLjD,KAAMoB,EACNG,QAAS5E,KAkDyEkD,WAbvE,SAACvD,GAAD,OAAU2G,EAAS,CAACjD,KAAMc,EAAaS,QAASjF,KAcvDwB,oBAAmBwC,uBAAsBV,eAAchC,UAASC,WAAUZ,WAHlF,SAKK4F,KC1EEU,MAff,WACI,OACI,cAAC,EAAD,UACI,iCACI,oBAAIpG,UAAU,eAAd,8BACA,sBAAKA,UAAU,mBAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,OAEJ,mBAAGA,UAAU,eAAb,iGCADqG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.adaec278.chunk.js","sourcesContent":["import {cities} from './cityData.json'\r\nimport {CityType} from './types'\r\n\r\nexport const convertKelvinToCelsius = (temp: number) => Math.round(temp - 273)\r\n\r\nexport const formatDate = (date: number) => {\r\n    const dateInstance = new Date(date * 1000)\r\n    return dateInstance.toISOString().substr(0,10)\r\n}\r\n\r\nexport const getCityByIndex = (index: number): CityType => cities[index];\r\n\r\nexport const formatDateToUnix = (date: string): string => {\r\n    const dateObject = new Date(date)\r\n    return (dateObject.getTime() / 1000).toString()\r\n}","import React, {useContext, useEffect} from \"react\"\r\nimport img from '../../img/light-rain-icon.svg'\r\nimport './ForecastCardItem.css'\r\nimport {icons} from '../../icons.json'\r\nimport {WeatherForecastContext} from \"../../context/weatherForecast/weatherForecastContext\"\r\nimport {convertKelvinToCelsius, formatDate} from \"../../utils\"\r\n\r\nexport const ForecastCardItem: any = ({cardInfo}: any) => {\r\n\r\n    // @ts-ignore\r\n    const date = formatDate(cardInfo.dt)\r\n    const icon = cardInfo.weather[0].icon\r\n    const temp = convertKelvinToCelsius(cardInfo.temp.day)\r\n\r\n    return (\r\n        <div className='weather-card-item'>\r\n            <time className='time'>{date}</time>\r\n            {/* @ts-ignore */}\r\n            <img className='weather-icon' src={icons[icon].url} alt={icons[icon].alt}/>\r\n            <p className='temperature'>{`${temp}`}&deg;</p>\r\n        </div>\r\n    )\r\n}\r\n","import {createContext} from \"react\"\r\n\r\ntype State = any\r\n\r\nexport const WeatherForecastContext: any = createContext<State>(null)","import React, {useContext, useState, useEffect} from \"react\"\r\nimport {ForecastCardItem} from \"../ForecastCardItem/ForecastCardItem\"\r\nimport './ForecastCardList.css'\r\nimport {WeatherForecastContext} from \"../../context/weatherForecast/weatherForecastContext\"\r\nimport {getCityByIndex} from \"../../utils\"\r\n\r\nexport const ForecastCardList: React.FunctionComponent = () => {\r\n    const {loading, weathers, selectedCityIndex, getSevenDaysForecast} = useContext(WeatherForecastContext)\r\n    const [count, setCount] = useState(0)\r\n    const weathersThree = weathers && weathers.slice(count, count + 3)\r\n\r\n    useEffect(() => {\r\n        if (selectedCityIndex >= 0) {\r\n            const selectedCity = getCityByIndex(selectedCityIndex)\r\n            getSevenDaysForecast(selectedCity.coordinates)\r\n        }\r\n    }, [selectedCityIndex])\r\n\r\n    return (\r\n        <>\r\n            {(selectedCityIndex >= 0)\r\n                ? <div className='weather-card-list'>\r\n                    {loading\r\n                        ? <p className='loading'>Загрузка...</p>\r\n                        : <>\r\n                            {(count === 0)\r\n                                ? null\r\n                                : <button className='weather-card-list__arrow-left'\r\n                                          onClick={() => setCount(count - 1)}/>\r\n                            }\r\n\r\n                            {weathersThree.map((card: any) => (<ForecastCardItem cardInfo={card} key={card.dt}/>))}\r\n                            {(count > 3)\r\n                                ? null\r\n                                : <button className='weather-card-list__arrow-right'\r\n                                          onClick={() => setCount(count + 1)}/>\r\n                            }\r\n                        </>\r\n                    }\r\n                </div>\r\n                : <div className='weather-card-blank'>\r\n                    <p className='weather-card-blank__p'>Fill in all the fields and the weather will be displayed</p>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, FunctionComponent} from \"react\"\r\nimport './SelectCity.css'\r\n\r\ntype SelectCityProps = {\r\n    value?: number\r\n    cities: any[]\r\n    onChange: (value: number) => void\r\n}\r\n\r\nexport const SelectCity: FunctionComponent<SelectCityProps> = ({value, cities, onChange}) => {\r\n\r\n    const handleCitySelect = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        onChange(+e.target.value)\r\n    }\r\n\r\n    return (\r\n        <select className='select' onChange={handleCitySelect} value={value}>\r\n            <option selected disabled hidden value=''>Select city</option>\r\n            {\r\n                cities && cities.map((city, index) => {\r\n                    const {id, name} = city\r\n                    return (<option key={id} value={index}>{name}</option>)\r\n                })\r\n            }\r\n        </select>\r\n    )\r\n}","import React, {useContext, FunctionComponent} from \"react\"\r\nimport {WeatherForecastContext} from \"../../context/weatherForecast/weatherForecastContext\"\r\nimport {SelectCity} from \"./SelectCity\"\r\nimport {cities} from \"../../cityData.json\"\r\n\r\nexport const SelectCityContainer: FunctionComponent = () => {\r\n    const {selectCityIndex, selectedCityIndex} = useContext(WeatherForecastContext)\r\n\r\n    const handleCitySelect = (value: number): void => {\r\n        selectCityIndex(value)\r\n    }\r\n\r\n    return <SelectCity value={selectedCityIndex} cities={cities} onChange={handleCitySelect}/>\r\n}","import React from 'react'\r\nimport {ForecastCardList} from \"../ForecastCardList/ForecastCardList\"\r\nimport './ForecastSevenDays.css'\r\nimport {SelectCityContainer} from \"../SelectCity/SelectCityContainer\"\r\n\r\nexport const ForecastSevenDays: React.FunctionComponent = () => {\r\n\r\n    return (\r\n        <div className='forecast-container'>\r\n            <h2 className='forecast-container__h2'>7 Days Forecast</h2>\r\n            <form action=\"#\" className='form-box'>\r\n                <SelectCityContainer/>\r\n            </form>\r\n            <ForecastCardList />\r\n        </div>\r\n    )\r\n}","import React, {useContext, useEffect} from \"react\"\r\nimport img from '../../img/light-rain-icon.svg'\r\nimport './ForecastCardItem.css'\r\nimport {icons} from '../../icons.json'\r\nimport {WeatherForecastContext} from \"../../context/weatherForecast/weatherForecastContext\"\r\nimport {convertKelvinToCelsius, formatDate} from \"../../utils\"\r\n\r\nexport const ForecastCardItemOne: any = ({cardInfo}: any) => {\r\n    // @ts-ignore\r\n    const date = formatDate(cardInfo.dt)\r\n    const icon = cardInfo.weather[0].icon\r\n    const temp = convertKelvinToCelsius(cardInfo.temp)\r\n\r\n    return (\r\n        <div className='weather-card-item'>\r\n            <time className='time'>{date}</time>\r\n            {/* @ts-ignore */}\r\n            <img className='weather-icon' src={icons[icon]?.url} alt={icons[icon]?.alt || \"weather-icon\"}/>\r\n            <p className='temperature'>{`${temp}`}&deg;</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, useContext, useState} from \"react\"\r\nimport './SelectDate.css'\r\nimport {WeatherForecastContext} from \"../../context/weatherForecast/weatherForecastContext\"\r\n\r\nexport const SelectDate: React.FunctionComponent = () => {\r\n    const {selectedDate, selectDate} = useContext(WeatherForecastContext)\r\n    const currentDate = Date.now()\r\n\r\n const handleDateSelect = (e: ChangeEvent<HTMLInputElement>) => {\r\n        selectDate(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <input\r\n            type=\"date\"\r\n            className='select'\r\n            name=\"date\"\r\n            placeholder='date'\r\n            min=\"2017-04-01\"\r\n            max={currentDate}\r\n            value={selectedDate}\r\n            onChange={handleDateSelect}\r\n        />\r\n    )\r\n}","import React, {useContext, FunctionComponent} from \"react\"\r\nimport {WeatherForecastContext} from \"../../context/weatherForecast/weatherForecastContext\"\r\nimport {SelectCity} from \"./SelectCity\"\r\nimport {cities} from \"../../cityData.json\"\r\n\r\nexport const SelectCityOneContainer: FunctionComponent = () => {\r\n    const {selectCityOneIndex, selectedCityOneIndex} = useContext(WeatherForecastContext)\r\n\r\n    const handleCitySelect = (value: number): void => {\r\n        selectCityOneIndex(value);\r\n        console.log(value)\r\n    }\r\n\r\n    return <SelectCity value={selectedCityOneIndex} cities={cities} onChange={handleCitySelect}/>\r\n}","import React, {useContext, useEffect} from \"react\"\r\nimport {ForecastCardItemOne} from \"../ForecastCardItem/ForecastCardItemOne\"\r\nimport {SelectDate} from \"../SelectDate/SelectDate\"\r\nimport './ForecastOneDay.css'\r\nimport {WeatherForecastContext} from \"../../context/weatherForecast/weatherForecastContext\"\r\nimport {SelectCityOneContainer} from \"../SelectCity/SelectCityOneContainer\"\r\nimport {getCityByIndex, formatDateToUnix} from \"../../utils\"\r\n\r\nexport const ForecastOneDay: React.FunctionComponent = () => {\r\n\r\n    const {loading, weather, selectedCityOneIndex, selectedDate, getOneDayForecast} = useContext(WeatherForecastContext)\r\n\r\n    useEffect(() => {\r\n        if ((selectedCityOneIndex >= 0) && selectedDate) {\r\n            const selectedCity = getCityByIndex(selectedCityOneIndex)\r\n            const formattedDate = formatDateToUnix(selectedDate)\r\n            getOneDayForecast(selectedCity.coordinates, formattedDate)\r\n        }\r\n    },[selectedCityOneIndex, selectedDate])\r\n\r\n    return (\r\n        <div className='forecast-container'>\r\n            <h2 className='forecast-container__h2'>Forecast for a Date in the Past</h2>\r\n            <form action=\"#\" className='form-box'>\r\n                <SelectCityOneContainer/>\r\n                <SelectDate/>\r\n            </form>\r\n            {/*// @ts-ignore*/}\r\n            {weather\r\n                ? <ForecastCardItemOne cardInfo={weather}/>\r\n                : <div className='weather-card-blank'>\r\n                    <p className='weather-card-blank__p'>Fill in all the fields and the weather will be displayed</p>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","export const SELECT_DATE = 'SELECT_DATE'\r\nexport const GET_WEATHERS = 'GET_WEATHERS'\r\nexport const GET_WEATHER = 'GET_WEATHER'\r\nexport const SET_LOADING = 'SET_LOADING'\r\nexport const SET_STOP_LOADING = 'SET_STOP_LOADING'\r\nexport const SELECT_CITY_INDEX = 'SELECT_CITY_INDEX'\r\nexport const SELECT_CITY_ONE_INDEX = 'SELECT_CITY_ONE_INDEX'\r\n\r\n\r\n","import React from \"react\"\r\nimport {SELECT_DATE, GET_WEATHERS, GET_WEATHER, SELECT_CITY_INDEX, SET_LOADING, SET_STOP_LOADING, SELECT_CITY_ONE_INDEX} from \"../type\"\r\n\r\nconst handlers = {\r\n    // @ts-ignore\r\n    [SELECT_CITY_INDEX]: (state, {payload}) => ({...state, selectedCityIndex: payload}),\r\n    // @ts-ignore\r\n    [SELECT_CITY_ONE_INDEX]: (state, {payload}) => ({...state, selectedCityOneIndex: payload}),\r\n    // @ts-ignore\r\n    [GET_WEATHERS]: (state, {payload}) => ({...state, weathers: payload}),\r\n    // @ts-ignore\r\n    [GET_WEATHER]: (state, {payload}) => ({...state, weather: payload}),\r\n\r\n    // @ts-ignore\r\n    [SET_LOADING]: state => ({...state, loading: true}),\r\n    // @ts-ignore\r\n    [SET_STOP_LOADING]: state => ({...state, loading: false}),\r\n    // @ts-ignore\r\n    [SELECT_DATE]: (state, {payload}) => ({...state, selectedDate: payload}),\r\n    // @ts-ignore\r\n    DEFAULT: state => state\r\n}\r\n//action: {type: CLEAR_WEATHERS}\r\nexport const weatherForecastReducer: React.FunctionComponent = (state, action) => {\r\n   // @ts-ignore\r\n    const handler = handlers[action.type] || handlers.DEFAULT // handler = state => ({...state, weathers: []})\r\n    return handler(state, action)\r\n}","export const API_KEY = \"3271c2ed7c22a57273a4549fd585d36f\"\r\nexport const API_URL = 'https://api.openweathermap.org/data/2.5'\r\nexport const API_SEVEN_DAYS_URL = `${API_URL}/onecall`\r\nexport const API_ONE_DAY_URL = `${API_URL}/onecall/timemachine`","import {API_SEVEN_DAYS_URL, API_ONE_DAY_URL, API_KEY} from \"./consts\"\r\nimport {Coordinates} from \"../types\"\r\n\r\nexport const fetchSevenDaysForecast = async (coordinates: Coordinates): Promise<any>  => {\r\n    try {\r\n        const {lat, lon} = coordinates\r\n        const url = `${API_SEVEN_DAYS_URL}?lat=${lat}&lon=${lon}&appid=${API_KEY}`\r\n        const result = await fetch(url)\r\n        const forecast = await result.json()\r\n        forecast.daily.length = 7;\r\n        return forecast.daily\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n}\r\n\r\nexport const fetchOneDayForecast = async (coordinates: Coordinates, date: string): Promise<any> => {\r\n    try {\r\n        const url = `${API_ONE_DAY_URL}?lat=${coordinates.lat}&lon=${coordinates.lon}&dt=${date}&appid=${API_KEY}`\r\n        const result = await fetch(url)\r\n        const forecast = await result.json()\r\n        return forecast.current\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n}","import React, {useReducer} from \"react\"\r\nimport {WeatherForecastContext} from \"./weatherForecastContext\"\r\nimport {weatherForecastReducer} from \"./weatherForecastReducer\"\r\nimport {SELECT_DATE, GET_WEATHERS, GET_WEATHER, SET_LOADING, SET_STOP_LOADING, SELECT_CITY_INDEX, SELECT_CITY_ONE_INDEX} from \"../type\"\r\nimport {fetchSevenDaysForecast, fetchOneDayForecast} from \"../../api/requests\"\r\nimport {Coordinates} from \"../../types\"\r\n\r\ntype WeatherForecastState = {\r\n    selectedCityIndex?: number\r\n    selectedCityOneIndex?: number\r\n    selectedDate: Date\r\n    loading: boolean\r\n    weathers: []\r\n    weather: any\r\n}\r\n\r\nexport const WeatherForecastState: React.FunctionComponent = ({children}) => {\r\n\r\n    const initialState: WeatherForecastState = {\r\n        selectedCityIndex: undefined,\r\n        selectedCityOneIndex: undefined,\r\n        selectedDate: new Date(0),\r\n        loading: false,\r\n        weathers: [],\r\n        weather: null\r\n    }\r\n    // @ts-ignore\r\n    const [state, dispatch] = useReducer(weatherForecastReducer, initialState)\r\n\r\n    const selectCityIndex = (index: number) => {\r\n        //@ts-ignore\r\n        dispatch({\r\n            type: SELECT_CITY_INDEX,\r\n            payload: index\r\n        })\r\n    }\r\n\r\n    const selectCityOneIndex = (index: number) => {\r\n        //@ts-ignore\r\n        dispatch({\r\n            type: SELECT_CITY_ONE_INDEX,\r\n            payload: index\r\n        })\r\n    }\r\n\r\n    const getSevenDaysForecast = async (coordinates: Coordinates) => {\r\n        try{\r\n            setLoading()\r\n            const sevenDaysForecast = await fetchSevenDaysForecast(coordinates)\r\n            //@ts-ignore\r\n            dispatch({\r\n                type: GET_WEATHERS,\r\n                payload: sevenDaysForecast\r\n            })\r\n            setStopLoading()\r\n        } catch (e) {\r\n            setStopLoading()\r\n            throw new Error(e.message)\r\n        }\r\n    }\r\n\r\n    const getOneDayForecast = async (coordinates: Coordinates, date: string) => {\r\n        try{\r\n            setLoading()\r\n            const oneDayForecast = await fetchOneDayForecast(coordinates, date)\r\n            //@ts-ignore\r\n            dispatch({\r\n                type: GET_WEATHER,\r\n                payload: oneDayForecast\r\n            })\r\n            setStopLoading()\r\n        } catch (e) {\r\n            setStopLoading()\r\n            throw new Error(e.message)\r\n        }\r\n    }\r\n\r\n    //@ts-ignore\r\n    const selectDate = (date) => dispatch({type: SELECT_DATE, payload: date})\r\n\r\n    //@ts-ignore\r\n    const setLoading = () => dispatch({type: SET_LOADING})\r\n\r\n    //@ts-ignore\r\n    const setStopLoading = () => dispatch({type: SET_STOP_LOADING})\r\n\r\n    const {selectedCityIndex, selectedCityOneIndex, selectedDate, loading, weathers, weather} = state\r\n\r\n    return (\r\n        <WeatherForecastContext.Provider\r\n            value={{\r\n                getSevenDaysForecast, getOneDayForecast, selectCityIndex, selectCityOneIndex, selectDate,\r\n                selectedCityIndex, selectedCityOneIndex, selectedDate, loading, weathers, weather\r\n            }}>\r\n            {children}\r\n        </WeatherForecastContext.Provider>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport {ForecastSevenDays} from \"./components/ForecastSevenDays/ForecastSevenDays\";\r\nimport {ForecastOneDay} from \"./components/ForecastOneDay/ForecastOneDay\";\r\nimport {WeatherForecastState} from \"./context/weatherForecast/WeatherForecastState\";\r\n\r\nfunction App() {\r\n    return (\r\n        <WeatherForecastState>\r\n            <main>\r\n                <h1 className='header-title'>Weather forecast</h1>\r\n                <div className='forecast-wrapper'>\r\n                    <ForecastSevenDays/>\r\n                    <ForecastOneDay/>\r\n                </div>\r\n                <p className='footer-title'>C любовью от mercury development</p>\r\n            </main>\r\n        </WeatherForecastState>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}